[{"word": "variable.parameter", "info": "Parameters to a function or methods should use the following scope. This may also be used for other parameter-like variables, such as receivers or named return values in Go.", "menu": "scope"}, {"word": "variable.other.readwrite", "info": "A generic variable should use the following scope. Some languages use the readwrite variant for contrast with the constant variant discussed below.", "menu": "scope"}, {"word": "variable.other.member", "info": "Fields, properties, members and attributes of a class or other data structure should use:", "menu": "scope"}, {"word": "variable.other.constant", "info": "Immutable variables, often via a const modifier, should receive the following scope. Depending on the language and semantics, entity.name.constant may be a better choice.", "menu": "scope"}, {"word": "variable.other", "info": "A generic variable should use the following scope. Some languages use the readwrite variant for contrast with the constant variant discussed below.", "menu": "scope"}, {"word": "variable.language", "info": "Reserved variable names that are specified by the language, such as this, self, super, etc. should use:", "menu": "scope"}, {"word": "variable.function", "info": "Function and method names should be scoped using the following, but only when they are being invoked. When defined, they should use entity.name.function.", "menu": "scope"}, {"word": "variable.annotation", "info": "The final label in an identifier that is part of an annotation should use the following. For the entire identifier, the meta.path scope should be used. The entire annotation should get meta.annotation.", "menu": "scope"}, {"word": "variable", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "text.xml", "info": "XML should use:", "menu": "scope"}, {"word": "text.html", "info": "HTML should use the following scope. Variants for this scope are different than other scopes, in that the variant is always added after the .html, such as text.html.basic or text.html.markdown.", "menu": "scope"}, {"word": "text", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "support.type", "info": "While also used for base frameworks, many syntaxes apply these to scopes unrecognized classes and types, effectively scoping all user constructs.", "menu": "scope"}, {"word": "support.module", "info": "Elements provided by a base framework should use one of the following scopes. Examples include Cocoa within Objective-C, or the browser/Node within JavaScript.", "menu": "scope"}, {"word": "support.function", "info": "Elements provided by a base framework should use one of the following scopes. Examples include Cocoa within Objective-C, or the browser/Node within JavaScript.", "menu": "scope"}, {"word": "support.constant", "info": "Elements provided by a base framework should use one of the following scopes. Examples include Cocoa within Objective-C, or the browser/Node within JavaScript.", "menu": "scope"}, {"word": "support.class", "info": "While also used for base frameworks, many syntaxes apply these to scopes unrecognized classes and types, effectively scoping all user constructs.", "menu": "scope"}, {"word": "support", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "string.unquoted", "info": "Unquoted strings, such as in Shell and Batch File, should use:", "menu": "scope"}, {"word": "string.regexp", "info": "Regular expression literals should use:", "menu": "scope"}, {"word": "string.quoted.triple", "info": "Basic strings use the one of the following scopes, based on the type of quotes used:", "menu": "scope"}, {"word": "string.quoted.single", "info": "Basic strings use the one of the following scopes, based on the type of quotes used:", "menu": "scope"}, {"word": "string.quoted.other", "info": "Strings that used unconventional quotes, such as < and > with C imports, should use:", "menu": "scope"}, {"word": "string.quoted.double", "info": "Basic strings use the one of the following scopes, based on the type of quotes used:", "menu": "scope"}, {"word": "string", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "storage.type.union keyword.declaration.union", "info": "Keywords for classes, structs, interfaces, etc should use the following scopes \u2013 this list is not exhaustive. Example keywords include class, struct, impl and typedef. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type.trait keyword.declaration.trait", "info": "Keywords for classes, structs, interfaces, etc should use the following scopes \u2013 this list is not exhaustive. Example keywords include class, struct, impl and typedef. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type.struct keyword.declaration.struct", "info": "Keywords for classes, structs, interfaces, etc should use the following scopes \u2013 this list is not exhaustive. Example keywords include class, struct, impl and typedef. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type.interface keyword.declaration.interface", "info": "Keywords for classes, structs, interfaces, etc should use the following scopes \u2013 this list is not exhaustive. Example keywords include class, struct, impl and typedef. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type.impl keyword.declaration.impl", "info": "Keywords for classes, structs, interfaces, etc should use the following scopes \u2013 this list is not exhaustive. Example keywords include class, struct, impl and typedef. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type.function keyword.declaration.function", "info": "Keywords for functions or methods should use the following scopes. Example keywords include func, function and def. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type.enum keyword.declaration.enum", "info": "Keywords for classes, structs, interfaces, etc should use the following scopes \u2013 this list is not exhaustive. Example keywords include class, struct, impl and typedef. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type.class keyword.declaration.class", "info": "Keywords for classes, structs, interfaces, etc should use the following scopes \u2013 this list is not exhaustive. Example keywords include class, struct, impl and typedef. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type keyword.declaration.type", "info": "Keywords for classes, structs, interfaces, etc should use the following scopes \u2013 this list is not exhaustive. Example keywords include class, struct, impl and typedef. This includes storage.type for backwards compatibility with older color schemes.", "menu": "scope"}, {"word": "storage.type", "info": "Types should use the following scope. Examples include int, bool and char.", "menu": "scope"}, {"word": "storage.modifier", "info": "Keywords that affect the storage of a variable, function or data structure should use the following scope. Examples include static, inline, const, public and private.", "menu": "scope"}, {"word": "storage", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "source", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "source", "info": "A language-specific variant of the following scope is typically applied to the entirety of a source code file:", "menu": "scope"}, {"word": "punctuation.terminator", "info": "Semicolons or other statement terminators should use:", "menu": "scope"}, {"word": "punctuation.separator.continuation", "info": "Line-continuation characters, such as in Python and R, should use:", "menu": "scope"}, {"word": "punctuation.separator", "info": "Separators such as commas and colons should use:", "menu": "scope"}, {"word": "punctuation.accessor", "info": "Member access, scope resolution, or similar constructs should use the following scope. For Python or JavaScript this would be .. In PHP this would be applied to -> and ::. In C++, this would be applied to all three.", "menu": "scope"}, {"word": "punctuation", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "meta.union", "info": "The complete contents of data structures should be scoped using one of the following scopes. Similar to entity.name, they should be customized per language to provide rich semantic information. They should include all elements, such as the name, inheritance details and body.", "menu": "scope"}, {"word": "meta.type", "info": "The complete contents of data structures should be scoped using one of the following scopes. Similar to entity.name, they should be customized per language to provide rich semantic information. They should include all elements, such as the name, inheritance details and body.", "menu": "scope"}, {"word": "meta.trait", "info": "The complete contents of data structures should be scoped using one of the following scopes. Similar to entity.name, they should be customized per language to provide rich semantic information. They should include all elements, such as the name, inheritance details and body.", "menu": "scope"}, {"word": "meta.tag", "info": "HTML and XML tags, including punctuation, names and attributes should use the following:", "menu": "scope"}, {"word": "meta.struct", "info": "The complete contents of data structures should be scoped using one of the following scopes. Similar to entity.name, they should be customized per language to provide rich semantic information. They should include all elements, such as the name, inheritance details and body.", "menu": "scope"}, {"word": "meta.preprocessor", "info": "Preprocessor statements in language such as C should use:", "menu": "scope"}, {"word": "meta.path", "info": "Complete identifiers, including namespace names, should use the following scope. Such identifiers are the fully-qualified forms of variable, function and class names. For example, in C++ a path may look like myns::myclass, whereas in PHP it would appears such as \\MyNS\\MyClass.", "menu": "scope"}, {"word": "meta.parens", "info": "Sections of code delineated by parentheses should use one the following meta scopes, based on appropriate semantics. The ( and ) characters should additionally use the punctuation scopes.", "menu": "scope"}, {"word": "meta.paragraph", "info": "Paragraphs in markup languages use:", "menu": "scope"}, {"word": "meta.namespace", "info": "The entirety of a namespace, module or package should use:", "menu": "scope"}, {"word": "meta.interface", "info": "The complete contents of data structures should be scoped using one of the following scopes. Similar to entity.name, they should be customized per language to provide rich semantic information. They should include all elements, such as the name, inheritance details and body.", "menu": "scope"}, {"word": "meta.impl", "info": "The complete contents of data structures should be scoped using one of the following scopes. Similar to entity.name, they should be customized per language to provide rich semantic information. They should include all elements, such as the name, inheritance details and body.", "menu": "scope"}, {"word": "meta.group", "info": "Sections of code delineated by parentheses should use one the following meta scopes, based on appropriate semantics. The ( and ) characters should additionally use the punctuation scopes.", "menu": "scope"}, {"word": "meta.generic", "info": "Generic data type constructs should use the following scope. Any symbols that denote the beginning and end, such as < and >, should additionally use the punctuation scopes.", "menu": "scope"}, {"word": "meta.function.return-type", "info": "The entire scope of a function should be covered by one of the following scopes. Each variant should be applied to a specific part, and not stacked. For example, meta.function.php meta.function.parameters.php should never occur, but instead the scopes should alternate between meta.function.php then meta.function.parameters.php and back to meta.function.php.", "menu": "scope"}, {"word": "meta.function.parameters", "info": "The entire scope of a function should be covered by one of the following scopes. Each variant should be applied to a specific part, and not stacked. For example, meta.function.php meta.function.parameters.php should never occur, but instead the scopes should alternate between meta.function.php then meta.function.parameters.php and back to meta.function.php.", "menu": "scope"}, {"word": "meta.function-call", "info": "Function names, including the full path, and all parameters should receive the following scope. The name of the function or method should be variable.function, unless the function is scoped with support.function.", "menu": "scope"}, {"word": "meta.function", "info": "The entire scope of a function should be covered by one of the following scopes. Each variant should be applied to a specific part, and not stacked. For example, meta.function.php meta.function.parameters.php should never occur, but instead the scopes should alternate between meta.function.php then meta.function.parameters.php and back to meta.function.php.", "menu": "scope"}, {"word": "meta.enum", "info": "The complete contents of data structures should be scoped using one of the following scopes. Similar to entity.name, they should be customized per language to provide rich semantic information. They should include all elements, such as the name, inheritance details and body.", "menu": "scope"}, {"word": "meta.class", "info": "The complete contents of data structures should be scoped using one of the following scopes. Similar to entity.name, they should be customized per language to provide rich semantic information. They should include all elements, such as the name, inheritance details and body.", "menu": "scope"}, {"word": "meta.brackets", "info": "Sections of code delineated by square brackets should use the following scope. The [ and ] characters should additionally use the punctuation scopes.", "menu": "scope"}, {"word": "meta.braces", "info": "Sections of code delineated by curly braces should use one the following meta scopes, based on appropriate semantics. The { and } characters should additionally use the punctuation scopes.", "menu": "scope"}, {"word": "meta.block", "info": "Sections of code delineated by curly braces should use one the following meta scopes, based on appropriate semantics. The { and } characters should additionally use the punctuation scopes.", "menu": "scope"}, {"word": "meta.annotation.parameters", "info": "Annotations, attributes and decorator statements that are used to modify the behavior or implementation of a class, method or function should use one of the following meta scopes for each component of the annotation. That is to say, there should never be more than one meta.annotation* scope on the stack at any given time. See variable.annotation for scoping the identifier.", "menu": "scope"}, {"word": "meta.annotation.identifier", "info": "Annotations, attributes and decorator statements that are used to modify the behavior or implementation of a class, method or function should use one of the following meta scopes for each component of the annotation. That is to say, there should never be more than one meta.annotation* scope on the stack at any given time. See variable.annotation for scoping the identifier.", "menu": "scope"}, {"word": "meta.annotation", "info": "Annotations, attributes and decorator statements that are used to modify the behavior or implementation of a class, method or function should use one of the following meta scopes for each component of the annotation. That is to say, there should never be more than one meta.annotation* scope on the stack at any given time. See variable.annotation for scoping the identifier.", "menu": "scope"}, {"word": "meta", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "markup.underline.link", "info": "Links should use:", "menu": "scope"}, {"word": "markup.underline", "info": "Basic text styling should use one of:", "menu": "scope"}, {"word": "markup.raw.inline", "info": "Inline and block literal quoting, often used for code, should use:", "menu": "scope"}, {"word": "markup.raw.block", "info": "Inline and block literal quoting, often used for code, should use:", "menu": "scope"}, {"word": "markup.quote", "info": "Blockquotes and other quote styles should use:", "menu": "scope"}, {"word": "markup.other", "info": "Other markup, including constructs such as footnotes and tables, should use:", "menu": "scope"}, {"word": "markup.list.unnumbered", "info": "Lists should use one of:", "menu": "scope"}, {"word": "markup.list.numbered", "info": "Lists should use one of:", "menu": "scope"}, {"word": "markup.italic", "info": "Basic text styling should use one of:", "menu": "scope"}, {"word": "markup.inserted", "info": "Inserted and deleted content, such as with diff output, should use:", "menu": "scope"}, {"word": "markup.heading", "info": "Section headings should use:", "menu": "scope"}, {"word": "markup.deleted", "info": "Inserted and deleted content, such as with diff output, should use:", "menu": "scope"}, {"word": "markup.bold", "info": "Basic text styling should use one of:", "menu": "scope"}, {"word": "markup", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "keyword.other", "info": "All remaining non-operator keywords fall under the other variant:", "menu": "scope"}, {"word": "keyword.operator.word", "info": "When the operator is a word, such as and, or or not, the following variant is used:", "menu": "scope"}, {"word": "keyword.operator.logical", "info": "Operators are typically symbols, so the term keyword can seem somewhat contradictory. Specific variants are sometimes referenced based on the type of operator.", "menu": "scope"}, {"word": "keyword.operator.bitwise", "info": "Operators are typically symbols, so the term keyword can seem somewhat contradictory. Specific variants are sometimes referenced based on the type of operator.", "menu": "scope"}, {"word": "keyword.operator.assignment", "info": "Operators are typically symbols, so the term keyword can seem somewhat contradictory. Specific variants are sometimes referenced based on the type of operator.", "menu": "scope"}, {"word": "keyword.operator.arithmetic", "info": "Operators are typically symbols, so the term keyword can seem somewhat contradictory. Specific variants are sometimes referenced based on the type of operator.", "menu": "scope"}, {"word": "keyword.operator", "info": "Operators are typically symbols, so the term keyword can seem somewhat contradictory. Specific variants are sometimes referenced based on the type of operator.", "menu": "scope"}, {"word": "keyword.control.import", "info": "Control keywords examples include if, try, end and while. Some syntaxes prefer to mark if and else with the conditional variant. The import variant is often used in appropriate situations.", "menu": "scope"}, {"word": "keyword.control.conditional", "info": "Control keywords examples include if, try, end and while. Some syntaxes prefer to mark if and else with the conditional variant. The import variant is often used in appropriate situations.", "menu": "scope"}, {"word": "keyword.control", "info": "Control keywords examples include if, try, end and while. Some syntaxes prefer to mark if and else with the conditional variant. The import variant is often used in appropriate situations.", "menu": "scope"}, {"word": "keyword", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "invalid.illegal", "info": "Elements that are illegal in a specific context should use the following scope. Overuse of this will likely lead to unpleasant highlighting for users as they edit code.", "menu": "scope"}, {"word": "invalid.deprecated", "info": "Deprecated elements should be scoped using the following scope. This should be very rarely used, as users may be working with older versions of a language.", "menu": "scope"}, {"word": "invalid", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "entity.other.inherited-class", "info": "Class, interface and trait names listed as an inherited class or implemented interface/trait should use:", "menu": "scope"}, {"word": "entity.other.attribute-name", "info": "HTML, CSS and XML use the following for tag attribute names:", "menu": "scope"}, {"word": "entity.name.union", "info": "Avoid entity.name.type.class and entity.name.type.struct which unnecessarily nest scope labels under type.", "menu": "scope"}, {"word": "entity.name.type", "info": "Avoid entity.name.type.class and entity.name.type.struct which unnecessarily nest scope labels under type.", "menu": "scope"}, {"word": "entity.name.trait", "info": "Avoid entity.name.type.class and entity.name.type.struct which unnecessarily nest scope labels under type.", "menu": "scope"}, {"word": "entity.name.tag", "info": "HTML and XML tags should use the following scope. This is the only entity.name scope that is applied to repeated constructs.", "menu": "scope"}, {"word": "entity.name.struct", "info": "Avoid entity.name.type.class and entity.name.type.struct which unnecessarily nest scope labels under type.", "menu": "scope"}, {"word": "entity.name.section", "info": "Heading names in markup languages, such as Markdown and Textile, should use:", "menu": "scope"}, {"word": "entity.name.namespace", "info": "Namespaces, packages and modules use the following scope. There are usually not multiple types of such constructs in a language, so this scope should suffice.", "menu": "scope"}, {"word": "entity.name.label", "info": "Labels for goto-like constructs should use:", "menu": "scope"}, {"word": "entity.name.interface", "info": "Avoid entity.name.type.class and entity.name.type.struct which unnecessarily nest scope labels under type.", "menu": "scope"}, {"word": "entity.name.impl", "info": "Avoid entity.name.type.class and entity.name.type.struct which unnecessarily nest scope labels under type.", "menu": "scope"}, {"word": "entity.name.function.destructor", "info": "Function names receive one of the following scopes. These are included in the symbol list and index.", "menu": "scope"}, {"word": "entity.name.function.constructor", "info": "Function names receive one of the following scopes. These are included in the symbol list and index.", "menu": "scope"}, {"word": "entity.name.function", "info": "Function names receive one of the following scopes. These are included in the symbol list and index.", "menu": "scope"}, {"word": "entity.name.enum", "info": "Avoid entity.name.type.class and entity.name.type.struct which unnecessarily nest scope labels under type.", "menu": "scope"}, {"word": "entity.name.constant", "info": "Constants should use the following scope or variable.other.constant, depending on the language semantics. This scope is often included in the symbol list and index.", "menu": "scope"}, {"word": "entity.name.class.forward-decl", "info": "forward-decl variants of the above are used in languages such as C and C++. Such scopes can be used to exclude identifiers from the symbol list and indexing.", "menu": "scope"}, {"word": "entity.name.class", "info": "Avoid entity.name.type.class and entity.name.type.struct which unnecessarily nest scope labels under type.", "menu": "scope"}, {"word": "entity", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "constant.other.placeholder", "info": "Formatting placeholders, such as those used for sprintf(), e.g. %s, should use:", "menu": "scope"}, {"word": "constant.other", "info": "Other language-specific constant values, such as symbols in Ruby, should use:", "menu": "scope"}, {"word": "constant.numeric.integer.other", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.integer.octal", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.integer.hexadecimal", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.integer.decimal", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.integer.binary", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.integer", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.float.other", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.float.octal", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.float.hexadecimal", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.float.decimal", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.float.binary", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.float", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.complex.real", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.complex.imaginary", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric.complex", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.numeric", "info": "Numeric literals, including integers, floats, etc. should use one of:", "menu": "scope"}, {"word": "constant.language", "info": "Constants that are built into the language, such as booleans and null values, should use:", "menu": "scope"}, {"word": "constant.character.escape", "info": "Character escapes in strings, e.g. \\n and \\x20, should use:", "menu": "scope"}, {"word": "constant", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}, {"word": "comment.line", "info": "Single and multi-line comments should use, respectively:", "menu": "scope"}, {"word": "comment.block.documentation", "info": "Multi-line comments used as documentation, such as Javadoc or PhpDoc, should use:", "menu": "scope"}, {"word": "comment.block", "info": "Single and multi-line comments should use, respectively:", "menu": "scope"}, {"word": "comment", "info": "The following, top-level, list of scopes is sorted alphabetically. It is recommended to read through the entire list at least once before writing or modifying a syntax.", "menu": "scope"}]